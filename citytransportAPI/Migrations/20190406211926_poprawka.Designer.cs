// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using citytransportAPI;

namespace citytransportAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20190406211926_poprawka")]
    partial class poprawka
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Core.Data.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<decimal>("Money");

                    b.Property<string>("Name");

                    b.Property<int?>("OwnerId");

                    b.Property<int>("Population");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Core.Data.Models.Configuration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConfigSerialized");

                    b.Property<short>("ConfigurationType");

                    b.HasKey("Id");

                    b.ToTable("Configurations");
                });

            modelBuilder.Entity("Core.Data.Models.MapField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<short>("ElementType");

                    b.Property<int>("GridHeight");

                    b.Property<int>("GridWidth");

                    b.Property<int>("GridX");

                    b.Property<int>("GridY");

                    b.Property<int>("PhotoId");

                    b.Property<bool>("Visible");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId");

                    b.ToTable("MapFields");
                });

            modelBuilder.Entity("Core.Data.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("Core.Data.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Email");

                    b.Property<string>("Login");

                    b.Property<decimal>("Money");

                    b.Property<byte[]>("Password");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Core.Data.Models.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Capacity");

                    b.Property<decimal>("Cost");

                    b.Property<DateTime>("Created");

                    b.Property<decimal>("Fuel");

                    b.Property<int>("OwnerId");

                    b.Property<decimal>("Speed");

                    b.Property<short>("VehicleType");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Core.Data.Models.City", b =>
                {
                    b.HasOne("Core.Data.Models.Player", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");
                });

            modelBuilder.Entity("Core.Data.Models.MapField", b =>
                {
                    b.HasOne("Core.Data.Models.Photo", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Data.Models.Vehicle", b =>
                {
                    b.HasOne("Core.Data.Models.Player", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
